import java.util.*;
import java.io.*;
import server.*;
import java.awt.*; // Added in Phase 5
import java.awt.event.*;  //Added in phase 5
import serverUIUtilities.*; // Added in Phase 5
import commonUIUtilities.window.*; // Added in Phase 5
import ocsf.server.ObservableOriginatorServer;

/**
 * This class constructs the UI for a chat server.
 * This class used to be called ServerConsole prior to Phase 5.  This 
 * solution still has a display() method, but instead of using the ChatIF
 * interface, uses the observer/observable pattern.
 *
 * @author Fran&ccedil;ois B&eacute;langer
 * @author Dr Timothy C. Lethbridge
 * @author Dr Robert Lagani&egrave;re
 * @version July 2000
 */
public class ServerGUI extends Frame implements Observer
{
  //Class variables *************************************************
  
  /**
   * The default port to listen on.
   */
  final public static int DEFAULT_PORT = 5555;
  
  
  //Instance variables **********************************************
  
  /**
   * The instance of the server that created this ServerUI.
   */
  EchoServer server;

  /**
  * The objects that will be used in the frame
  * Added in Phase 5
  */
  TextArea serverText = new TextArea("");
  TextField serverInput = new TextField();

  StringList listOfClients = new StringList();

  Button btnListen = new Button("Listen");
  Button btnClose = new Button("Close");
  Button btnQuit = new Button("Quit");

  MenuBar menuBar = new MenuBar();
  Menu menuFile = new Menu("File");
  Menu menuEdit = new Menu("Edit");
  Menu menuView = new Menu("View");

  MenuItem menuFileExit = new MenuItem("Exit");
  MenuItem menuFileListen = new MenuItem("Listen");
  MenuItem menuFileStop = new MenuItem("Stop");
  MenuItem menuFileClose = new MenuItem("Close");
  MenuItem menuFilePunt = new MenuItem("Punt");
  MenuItem menuFileWarn = new MenuItem("Warn");
  MenuItem menuEditClear = new MenuItem("Clear");
  MenuItem menuEditBlock = new MenuItem("Block");
  MenuItem menuEditUnblock = new MenuItem("Unblock");
  MenuItem menuViewPort = new MenuItem("Port Number");
  MenuItem menuViewIBlock = new MenuItem("Blocked Users");
  MenuItem menuViewWhoBlocks = new MenuItem("Blocking Users");

  //Constructors ****************************************************

  /**
   * Constructs an instance of the ServerConsole UI.
   *
   * @param port The port to connect on.
   */
  public ServerGUI(ObservableOriginatorServer ooserver)
  {
    server = new EchoServer(ooserver);
    server.addObserver((Observer)this);

    // Set the menu bar properties
    // Added in Phase 5

    // Add the menu item keylisteners
    menuFileExit.addActionListener(new ServerMenuExitAdapter(server));
    menuFileClose.addActionListener(new ServerMenuCloseAdapter(server));
    menuFileWarn.addActionListener(new ServerMenuWarnAdapter(server));
    menuFilePunt.addActionListener(new ServerMenuPuntAdapter(server));
    menuFileStop.addActionListener(new ServerMenuStopAdapter(server));
    menuFileListen.addActionListener(new ServerMenuListenAdapter(server));
    menuEditBlock.addActionListener(new ServerMenuBlockAdapter(server));
    menuEditUnblock.addActionListener(new ServerMenuUnblockAdapter(server));
    menuEditClear.addActionListener(new ServerMenuClearAdapter(server));
    menuViewPort.addActionListener(new ServerMenuPortAdapter(server));
    menuViewIBlock.addActionListener(new ServerMenuIBlockAdapter(server));
    menuViewWhoBlocks.addActionListener(new ServerMenuWhoBlocksAdapter(server));
    
    // Add the menus
    menuBar.add(menuFile);
    menuBar.add(menuEdit);
    menuBar.add(menuView);

    // Add the menu items
    menuFile.add(menuFileListen);
    menuFile.add(menuFileStop);
    menuFile.add(menuFileClose);
    menuFile.add(new MenuItem("-"));
    menuFile.add(menuFileWarn);
    menuFile.add(menuFilePunt);
    menuFile.add(new MenuItem("-"));
    menuFile.add(menuFileExit);
    menuEdit.add(menuEditBlock);
    menuEdit.add(menuEditUnblock);
    menuEdit.add(new MenuItem("-"));
    menuEdit.add(menuEditClear);
    menuView.add(menuViewPort);
    menuView.add(new MenuItem("-"));
    menuView.add(menuViewIBlock);
    menuView.add(menuViewWhoBlocks);

    // Add the menu bar to the frame
    setMenuBar(menuBar);

    // Set the window properties
    // Added in Phase 5
    setLayout(null); // Used to let a layout manager place your objects
    setResizable(false);
    setTitle("Server Window");
    setBounds(1,1,600,550);
    addWindowListener(new MyWindowAdapter());
    setVisible(true);

    // Set the text area properties
    // Added in Phase 5
    add(serverText);
    serverText.setEditable(false);
    serverText.setBounds(10,100,380,400);

    // This method will set the text field properties including a KeyListener
    // that will handle the events generated by the text field.
    // Added in Phase 5
    newServerInput();

    // Set the list box properties
    // Added in Phase 5
    add(listOfClients);
    listOfClients.setBounds(400,60,175,450);

    // Set the button properties
    // Added in Phase 5

    // Add the button keylisteners
    btnListen.addActionListener(new ServerButtonListenAdapter(server));
    btnClose.addActionListener(new ServerButtonCloseAdapter(server));
    btnQuit.addActionListener(new ServerButtonQuitAdapter(server));

    // Add the buttons to the frame
    add(btnListen);
    add(btnClose);
    add(btnQuit);

    // Set the bounds
    btnListen.setBounds(10,510,75,30);
    btnClose.setBounds(100,510,75,30);
    btnQuit.setBounds(190,510,75,30);

    // Set the objects in the frame to their not connected state
    // Added in Phase 5
    notConnected();

    //Display the welcome message
    serverText.append("\n\nWelcome to the Simple Chat Server!!\n\n");
  }

  //Instance methods ************************************************

  /**
   * This is a work around for a problem with text fields in
   * UNIX. The problem is once an echo character is set, it can't be taken
   * off, therefore a new instance of TextField must be created.
   */
  void newServerInput() 
  {
    remove(serverInput);
    serverInput = new TextField();
    add(serverInput);
    serverInput.setBounds(10,60,380,32);
    serverInput.addKeyListener(new ServerInputKeyAdapter(server));
  }

  /**
   * This method sets object properties to what the should be when
   * the server is connected.
   */
  void connected() 
  {
    menuFileListen.setEnabled(false);
    menuFileClose.setEnabled(true);
    menuFileStop.setEnabled(true);
    menuFileWarn.setEnabled(true);
    menuFilePunt.setEnabled(true);
    menuEditBlock.setEnabled(true);
    menuEditUnblock.setEnabled(true);
    menuViewIBlock.setEnabled(true);
    menuViewWhoBlocks.setEnabled(true);
    btnListen.setEnabled(false);
    btnClose.setEnabled(true);
  }

  /**
   * This method sets object properties to what the should be when
   * the server is not connected.
   */
  void notConnected() 
  {
    listOfClients.removeAll();
    menuFileListen.setEnabled(true);
    menuFileClose.setEnabled(false);
    menuFileStop.setEnabled(false);
    menuFileWarn.setEnabled(false);
    menuFilePunt.setEnabled(false);
    menuEditBlock.setEnabled(false);
    menuEditUnblock.setEnabled(false);
    menuViewIBlock.setEnabled(false);
    menuViewWhoBlocks.setEnabled(false);
    btnListen.setEnabled(true);
    btnClose.setEnabled(false);
  }
  
  /**
   * This method sets object properties to what they should be when
   * the server is stopped.
   */
  void stopped()
  {
    menuFileListen.setEnabled(true);
    menuFileStop.setEnabled(false);
    btnListen.setEnabled(true);
  }

  /**
   * This method overrides the interface method display in order to
   * display messages on the server UI.
   */
  public void display(String message)
  {
    serverText.append(message + "\n");
  }

  /**
   * This method is called when the observers are notified of a
   * change.
   *
   * @param obj The object being observed.
   * @param arg The argument passed along by the observers.
   */
  public void update(Observable obj, Object arg)
  {
    if (arg.equals("#enter"))
    {
      server.handleMessageFromServerUI(serverInput.getText());
      serverInput.setText("");
      return;
    }
    
    if (arg.equals("#started"))
    {
      connected();
      return;
    }
    
    if (arg.equals("#closed"))
    {
      notConnected();
      return;
    }

    if (arg.equals("#stopped"))
    {
      stopped();
      return;
    }
        
    if (arg.equals("#unblock"))
    {
      String selectedClient = "";
      
      selectedClient = listOfClients.getSelectedItem();

      try
      {
        // The substring is included since the format in the list box
        // is '<loginID> - <channel>'
        server.handleMessageFromServerUI("#unblock "
          + selectedClient.substring(0, selectedClient.indexOf("-") - 1));
      }
      catch(NullPointerException e)
      {
        // Handle the case when nothing is selected
        server.handleMessageFromServerUI("#unblock");
        return;
      }
      return;
    }
    
    if (arg.equals("#block"))
    {
      String selectedClient = "";
    
      selectedClient = listOfClients.getSelectedItem();

      try
      {
        // The substring is included since the format in the list box
        // is '<loginID> - <channel>'
        server.handleMessageFromServerUI("#block "
          + selectedClient.substring(0, selectedClient.indexOf("-") - 1));
      }
      catch(NullPointerException e)
      {
        // Handle the case when nothing is selected
        display("You must select a client from the list before using "
          + "this menu command.");
        return;
      }
      return;
    }

    if (arg.equals("#punt"))
    {
      String selectedClient = "";
    
      selectedClient = listOfClients.getSelectedItem();

      try
      {
        // The substring is included since the format in the list box
        // is '<loginID> - <channel>'
        server.handleMessageFromServerUI("#punt "
          + selectedClient.substring(0, selectedClient.indexOf("-") - 1));
      }
      catch(NullPointerException e)
      {
        // Handle the case when nothing is selected
        display("You must select a client from the list before using "
          + "this menu command.");
        return;
      }
      return;
    }

    if (arg.equals("#warn"))
    {
      String selectedClient = "";
    
      selectedClient = listOfClients.getSelectedItem();

      try
      {
        // The substring is included since the format in the list box
        // is '<loginID> - <channel>'
        server.handleMessageFromServerUI("#warn "
          + selectedClient.substring(0, selectedClient.indexOf("-") - 1));
      }
      catch(NullPointerException e)
      {
        // Handle the case when nothing is selected
        display("You must select a client from the list before using "
          + "this menu command.");
        return;
      }
      return;
    }

    if (arg.equals("#clear"))
    {
      serverText.setText("");
      return;
    }
    
    if (arg.toString().startsWith("#add"))
    {
      listOfClients.addToList(arg.toString().substring(5));
      return;
    }
    
    if (arg.toString().startsWith("#remove"))
    {
      listOfClients.removeFromList(arg.toString().substring(8));
      return;
    }
    
    // The next if was added in Phase 6
    // If the argument is the #send command
    if (arg.toString().startsWith("#send"))
    {
      server.sendToAllClients(arg.toString().substring(6));
      server.notifyObservers(arg.toString().substring(6));
      return;
    }
    
    if (arg.toString().startsWith("#"))
    {
      return;
    }

    display((String)arg);
  }
  
  
  //Class methods ***************************************************
  
  /**
   * This method is responsible for the creation of the server UI and
   * the server instance.
   *
   * @param args[0] The port number to listen on.  Defaults to 5555 
   *         if no argument is entered.
   */
  public static void main(String[] args) 
  {
    int port = 0;  //Port to listen on
    
    try
    {
      port = Integer.parseInt(args[0]);  //Get port from command line
    }
    catch(ArrayIndexOutOfBoundsException e)
    {
      port = DEFAULT_PORT;  //Set port to 5555
    }
    
    ObservableOriginatorServer ooserver = new ObservableOriginatorServer(port);
    ServerGUI sv = new ServerGUI(ooserver);
  }
}

